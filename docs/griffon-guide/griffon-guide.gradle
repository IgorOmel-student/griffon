/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'org.kordamp.gradle.guide'
apply plugin: 'org.ajoberstar.git-publish'

ext.childProjects = [
    ':griffon-core',
    ':griffon-core-test',
    ':griffon-beans',
    ':griffon-groovy',
    ':griffon-guice',
    ':griffon-core-compile',
    ':griffon-beans-compile',
    ':griffon-groovy-compile',
    ':griffon-javafx-compile',
    ':griffon-swing',
    ':griffon-javafx',
    ':griffon-lanterna',
    ':griffon-lanterna3',
    ':griffon-pivot',
    ':griffon-swing-groovy',
    ':griffon-javafx-groovy',
    ':griffon-lanterna-groovy',
    ':griffon-lanterna3-groovy',
    ':griffon-pivot-groovy',
    ':griffon-swing-test',
    ':griffon-javafx-test',
    ':griffon-pivot-test'
]

ext.sampleProjects = []
for (toolkit in ['swing', 'javafx', 'pivot', 'lanterna', 'lanterna3']) {
    for (lang in ['groovy', 'java']) {
        sampleProjects << ":sample-${toolkit}-${lang}".toString()
    }
}
(ext.childProjects + ext.sampleProjects).each { evaluationDependsOn it }

config {
    /*whenRootProjectReady { Project rp ->
        project(':griffon-guide').tasks.findByName('createGuide').with {
            dependsOn rp.tasks.findByName('aggregateSourceJar')
            dependsOn rp.tasks.findByName('aggregateJavadocsJar')
            dependsOn rp.tasks.findByName('aggregateSourceHtmlJar')
            from(rp.tasks.findByName('aggregateSourceJar').destinationDir)
            from(rp.tasks.findByName('aggregateJavadocsJar').destinationDir)
            from(rp.tasks.findByName('aggregateSourceHtmlJar').destinationDir)
        }
    }*/
}

task sampleStats() {
    dependsOn sampleProjects.collect { project(it).tasks.findByName('sourceStats') }
}

def loadProperties(File file) {
    Properties props = new Properties()
    file.withReader { Reader reader -> props.load(reader) }
    props
}

asciidoctor {
    dependsOn sampleStats
    attributes = [
        toc                     : 'left',
        doctype                 : 'book',
        icons                   : 'font',
        encoding                : 'utf-8',
        sectlink                : true,
        sectanchors             : true,
        numbered                : true,
        linkattrs               : true,
        imagesdir               : 'images',
        linkcss                 : true,
        stylesheet              : 'css/style.css',
        'source-highlighter'    : 'coderay',
        'coderay-linenums-mode' : 'table',
        'griffon-version'       : project.version,
        'groovy-version'        : project.groovyVersion,
        'spock-version'         : project.spockVersion,
        'slf4j-version'         : project.slf4jVersion,
        'griffon-group'         : project.group,
        'griffon-source-url'    : project_vcs_url,
        'rootprojectdir'        : rootProject.projectDir.absolutePath,
        'gradle-griffon-version': loadProperties(project(':gradle-griffon-plugin').file('gradle.properties')).version,
        'application-master-pom': loadProperties(project(':application-master-pom').file('gradle.properties')).version
    ]

    sources {
        include 'index.adoc'
    }

    resources {
        from file('src/resources')
        from(rootProject.file('src/media/banners/large.png')) {
            into 'images'
            rename '.*', 'griffon-banner-large.png'
        }
    }
}

guide {
    sourceHtmlDir = 'api-src'
}

afterEvaluate {
    project.tasks.findByName('createGuide')

    gitPublish {
        repoUri = rootProject.extensions.findByName('config').info.links.scm
        branch  = 'gh-pages'
        contents {
            from project.tasks.findByName('createGuide').outputs.files
        }
        commitMessage = "Publish guide for $version"
    }

    gitPublishCommit.dependsOn(project.tasks.findByName('createGuide'))
}