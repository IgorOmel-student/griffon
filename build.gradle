/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://dl.bintray.com/pledbrook/plugins' }
        mavenLocal()
    }

    dependencies {
        classpath 'org.kordamp.gradle:project-gradle-plugin:0.12.0'
        classpath 'org.kordamp.gradle:integrationtest-gradle-plugin:0.12.0'
        classpath 'org.kordamp.gradle:functionaltest-gradle-plugin:0.12.0'
        classpath 'org.kordamp.gradle:guide-gradle-plugin:0.12.0'
        classpath 'org.kordamp.gradle:jdeps-gradle-plugin:0.5.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath 'uk.co.cacoethes:lazybones-gradle:1.2.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.gradle.publish:plugin-publish-plugin:0.10.0'
        classpath 'gradle.plugin.net.ossindex:ossindex-gradle-plugin:0.3.21'
        classpath 'com.gradle:build-scan-plugin:2.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:5.0.0'
        classpath 'gradle.plugin.gradle-java9-collision:plugin:0.2.3'
        classpath 'org.jbake:jbake-gradle-plugin:1.4.0'
    }
}

apply plugin: 'com.gradle.build-scan'
apply from: 'gradle/idea.gradle'
apply plugin: 'groovy'
apply plugin: 'org.kordamp.gradle.project'
apply plugin: 'org.kordamp.gradle.clirr'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.sonarqube'

buildScan {
    termsOfServiceUrl   = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAlways()
    buildFinished { buildResult ->
        buildScanPublished { scan ->
            ['curl', '-s', '-d', "message=Build scan: ${scan.buildScanUri}", 'https://webhooks.gitter.im/e/9c3ecf139048ea1d3ce5'].execute()
        }

    }
}

boolean travis   = (System.env['TRAVIS'] ?: false) as boolean
boolean appveyor = (System.env['APPVEYOR'] ?: false) as boolean
ext {
    depProjects = []
    fullBuild = !travis && !appveyor
    resourceFilePatterns = [
        '**/*.properties',
        '**/*.groovy',
        '**/*.html',
        '**/*.xml',
        '**/*.txt'
    ]
    nonCoreProjects = subprojects.findAll { !it.projectDir.absolutePath.contains('subprojects') }
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''
if (!project.hasProperty('mavenUsername')) ext.mavenUsername = ''
if (!project.hasProperty('mavenPassword')) ext.mavenPassword = ''

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name          = 'griffon'
        vendor        = 'Griffon'
        description   = project.project_description
        inceptionYear = '2008'
        tags          = ['griffon']

        links {
            website      = 'https://github.com/griffon/griffon'
            issueTracker = 'https://github.com/griffon/griffon/issues'
            scm          = 'https://github.com/griffon/griffon.git'
        }

        people {
            person {
                id    = 'aalmiray'
                name  = 'Andres Almiray'
                roles = [ 'Developer']
            }
            person {
                id    = 'shemnon'
                name  = 'Danno Ferrin'
                roles = [ 'Developer']
            }
            person {
                id    = 'jwill'
                name  = 'James Williams'
                roles = [ 'Developer']
            }
            person {
                id    = 'aklein'
                name  = 'Alexander Klein'
                roles = [ 'Developer']
            }
            person {
                id    = 'rgroeschke'
                name  = 'Rene Groeschke'
                roles = [ 'Developer']
            }
            person {
                id    = 'rgroeschke'
                name  = 'Rene Groeschke'
                roles = [ 'Developer']
            }
            person {
                id    = 'rgroeschke'
                name  = 'Rene Groeschke'
                roles = [ 'Developer']
            }
            person {
                name  = 'Dierk Koenig'
                roles = [ 'Contributor']
            }
            person {
                name  = 'Guillaume Laforge'
                roles = [ 'Contributor']
            }
            person {
                name  = 'Dean Iverson'
                roles = [ 'Contributor']
            }
        }

        specification {
            title   = 'JSR-377 API'
            vendor  = 'JSR-377'
            version = '1.0.0'
        }

        credentials {
            sonatype {
                username = project.sonatypeUsername
                password = project.sonatypePassword
            }
        }
    }

    license {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    bintray {
        credentials {
            username = project.bintrayUsername
            password = project.bintrayApiKey
        }
        userOrg = 'griffon'
        name    = 'griffon'
    }
    stats {
        formats = ['xml', 'txt']
        paths = [
            mvc       : [name: 'MVCGroups',     path: 'griffon-app/mvcs'],
            model     : [name: 'Models',        path: 'griffon-app/models'],
            view      : [name: 'Views',         path: 'griffon-app/views'],
            controller: [name: 'Controllers',   path: 'griffon-app/controllers'],
            service   : [name: 'Services',      path: 'griffon-app/services'],
            config    : [name: 'Configuration', path: 'griffon-app/conf'],
            lifecycle : [name: 'Lifecycle',     path: 'griffon-app/lifecycle']
        ]
    }

    apidoc {
        replaceJavadoc = true
        excludedProjects.addAll nonCoreProjects
    }

    groovydoc {
        enabled = false
    }

    javadoc {
        exclude '**/*.html'
        exclude 'META-INF/**'
        exclude '**/*.groovy'

        options {
            addBooleanOption('javafx', true)
            links 'https://www.slf4j.org/apidocs/'
            links 'https://junit.org/junit4/javadoc/latest/'
            links 'https://aalmiray.github.io/jsr-305/apidocs/'
            links 'https://javax-inject.github.io/javax-inject/api/'
            links 'https://docs.oracle.com/javase/8/docs/api/'
            links 'https://docs.oracle.com/javase/8/javafx/api/'
            links 'https://google.github.io/guice/api-docs/4.1/javadoc/'
            links 'https://mabe02.github.io/lanterna/apidocs/3.0/'
            links 'https://pivot.apache.org/2.0.5/docs/api/'
            links 'http://docs.groovy-lang.org/latest/html/api/'
            links 'https://aalmiray.github.io/jipsy/apidocs/'
            links 'https://aalmiray.github.io/gipsy/apidocs/'
        }
    }

    bom {
        enabled = false
    }

    sourceHtml {
        overview {
            windowTitle = "Griffon $version"
            docTitle = "Griffon $version"
            docDescription = """Griffon is a Grails like application framework for developing desktop
                            applications in Groovy. Inspired by Grails, Griffon follows the Convention over
                            Configuration paradigm, paired with an intuitive MVC architecture and a command
                            line interface."""
            icon = rootProject.file('src/javadoc/resources/img/griffon.ico')
            stylesheet = rootProject.file('src/javadoc/resources/css/stylesheet.css')
        }
        excludedProjects.addAll nonCoreProjects
    }

    source {
        excludedProjects.addAll nonCoreProjects
    }

    sourceXref {
        excludedProjects.addAll nonCoreProjects
    }

    clirr {
        failOnErrors = false
        filter = { difference ->
            difference.message =~ /field __timeStamp/ ||
                difference.message =~ /super\$/ ||
                difference.message =~ /this\$/ ||
                difference.message =~ /__.swapInit/ ||
                difference.message =~ /_methodMissing/ ||
                difference.message =~ /_propertyMissing/ ||
                difference.message =~ /getDE/ ||
                difference.message =~ /getCO/ ||
                difference.message =~ /getSE/ ||
                difference.classname =~ /_closure/ ||
                !(difference.classname =~ /griffon/)
        }
    }
}

aggregateJavadocs {
    doLast { task ->
        copy {
            into task.destinationDir
            from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                rootProject.file('src/javadoc/resources/css/stylesheet.css')
        }
        copy {
            into file("${task.destinationDir}/resources")
            from rootProject.file('src/javadoc/resources/img/')
        }
        copy {
            into file("${task.destinationDir}/images/")
            from rootProject.file('src/media/banners/medium.png')
            rename '.*', 'griffon-banner-medium.png'
        }
    }
}

allprojects {
    apply plugin: 'idea'
    if (rootProject.fullBuild) apply plugin: 'net.ossindex.audit'

    repositories {
        jcenter()
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    if (rootProject.fullBuild) {
        audit {
            failOnError = false
        }
    }

    jacoco {
        toolVersion = jacocoVersion
    }
}

subprojects { Project subproj ->
    boolean isCoreProject = subproj.projectDir.absolutePath.contains('subprojects')
    boolean isArchetypeProject = subproj.name.endsWith('-archetype')
    boolean isPomProject = subproj.name.endsWith('-pom')
    boolean isGroovyProject = subproj.name.endsWith('-groovy')
    boolean isGradlePlugin = subproj.name.startsWith('gradle-')
    boolean shouldPublish = isCoreProject || isArchetypeProject

    config {
        publishing {
            enabled = shouldPublish
        }

        bintray {
            enabled = shouldPublish
        }

        javadoc {
            enabled = shouldPublish
        }

        source {
            enabled = shouldPublish
        }

        sourceHtml {
            enabled = isCoreProject
        }

        sourceXref {
            enabled = isCoreProject
        }

        clirr {
            enabled = isCoreProject && !isGradlePlugin && !isPomProject
            baseline = [subproj.group, subproj.name, subproj.previousVersion].join(':')
        }
    }

    plugins.withType(GroovyPlugin) {
        if (isCoreProject && !isGroovyProject) {
            compileGroovy.enabled = false
            groovydoc.enabled = false
        }
    }

    plugins.withType(JavaPlugin) {
        config {
            info {
                description = project.project_description
            }
        }

        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        subproj.tasks.withType(GroovyCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        dependencies {
            compileOnly "org.kordamp.jipsy:jipsy:${jipsyVersion}"
            annotationProcessor "org.kordamp.jipsy:jipsy:${jipsyVersion}"

            testCompile "org.junit.jupiter:junit-jupiter-api:$junit5Version"
            testCompile "org.junit.jupiter:junit-jupiter-params:$junit5Version"
            testCompile "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
            testCompile("org.junit.vintage:junit-vintage-engine:$junit5Version") {
                exclude group: 'junit', module: 'junit'
            }
            testCompile("junit:junit:$junitVersion") {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
            testCompile("com.google.guiceberry:guiceberry:$guiceBerryVersion") {
                exclude group: 'junit', module: 'junit'
            }
            testCompile("name.falgout.jeffrey.testing.junit5:guice-extension:$guiceExtensionVersion") {
                transitive = false
            }
            testCompile("com.google.inject:guice:$guiceVersion") {
                exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
            }
            if (!subproj.name.startsWith('gradle-')) {
                testCompile("org.codehaus.groovy:groovy-all:$groovyVersion") {
                    exclude group: 'junit', module: 'junit'
                }
                testCompile("org.spockframework:spock-core:$spockVersion") {
                    exclude group: 'junit', module: 'junit'
                    exclude group: 'org.codehaus.groovy', module: 'groovy'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-groovysh'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-json'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-nio'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-macro'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-templates'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-test'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-sql'
                    exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
                }

                testCompile "javax.application:jsr377-tck:$jsr377TckVersion"
                testCompile "org.mockito:mockito-core:$mockitoVersion"
            }
            testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
            testCompile 'cglib:cglib-nodep:3.2.0'
        }

        processTestResources {
            filesMatching(resourceFilePatterns) {
                expand(
                    'application_name'   : project.name,
                    'application_version': project.version,
                    'griffon_version'    : project.version
                )
            }
        }

        test {
            useJUnitPlatform()

            testLogging {
                events 'skipped', 'failed'
            }

            reports {
                html.enabled = true
            }
        }

        tasks.withType(AbstractCompile) {
            if (rootProject.hasProperty('lint') && rootProject.lint.toBoolean()) {
                options.compilerArgs = [
                    '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
                ]
            }
        }

        subproj.apply from: rootProject.file('gradle/code-quality.gradle')

        sonarqube {
            skipProject = !shouldPublish
        }

        if (shouldPublish) {
            subproj.apply plugin: 'nebula.optional-base'

            if (fullBuild) subproj.apply plugin: 'org.jonnyzzz.java9c'

            if (rootProject.fullBuild) {
                java9c {
                    failOnCollision = false
                }
            }

            if (isCoreProject && rootProject.fullBuild) {
                subproj.apply plugin: 'org.kordamp.gradle.jdeps'
                // subproj.apply from: rootProject.file('gradle/bintray.gradle')
                subproj.apply from: rootProject.file('gradle/sonarqube.gradle')
            }

            test {
                testLogging {
                    afterSuite { desc, result ->
                        if (!desc.parent) {
                            println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                        }
                    }
                }
            }

            javadoc {
                excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

                doLast { task ->
                    copy {
                        into task.destinationDir
                        from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                             rootProject.file('src/javadoc/resources/css/stylesheet.css')
                    }
                    copy {
                        into file("${task.destinationDir}/resources")
                        from rootProject.file('src/javadoc/resources/img/')
                    }
                }
            }
        }
    }

    task allDeps(type: DependencyReportTask) {}

    configurations.all {
        resolutionStrategy.force  "com.google.guava:guava:$guavaVersion",
            "jline:jline:$jlineVersion",
            "junit:junit:$junitVersion",
            "cglib:cglib-nodep:$cglibVersion",
            "org.asciidoctor:asciidoctorj:$asciidoctorjVersion",
            "org.codehau.groovy:groovy-all:$groovyVersion",
            "org.codehau.groovy:groovy-templates:$groovyVersion",
            "org.codehau.groovy:groovy-json:$groovyVersion",
            "org.codehau.groovy:groovy-macro:$groovyVersion",
            "org.codehau.groovy:groovy-nio:$groovyVersion",
            "org.codehau.groovy:groovy-templates:$groovyVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.easytesting:fest-util:$festUtilVersion",
            "com.google.code.findbugs:jsr305:$jsr305Version",
            "commons-io:commons-io:$commonsIoVersion",
            "org.apache.commons:commons-lang3:$commonsLang3Version",
            "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:$concurrentLHMVersion",
            "org.ow2.asm:asm:$asmVersion",
            "org.ow2.asm:asm-commons:$asmVersion",
            "org.ow2.asm:asm-tree:$asmVersion",
            "org.objenesis:objenesis:$objenesisVersion",
            "net.bytebuddy:byte-buddy:$bytebuddyVersion",
            "org.junit.jupiter:junit-jupiter-engine:$junit5Version",
            "org.junit.platform:junit-platform-engine:$junitPlatformVersion",
            "org.apache.ant:ant:$antVersion",
            "commons-collections:commons-collections:$commonsCollectionsVersion",
            "com.vladsch.flexmark:flexmark:$flexmarkVersion",
            "com.vladsch.flexmark:flexmark-profile-pegdown:$flexmarkVersion",
            "org.apache.ant:ant-launcher:1.9.13",
            "org.jruby:jruby-complete:$jrubyVersion"

        resolutionStrategy.failOnVersionConflict()
    }
}

project.gradle.addBuildListener(new BuildAdapter() {
    @Override
    void projectsEvaluated(Gradle gradle) {
        def effectiveConfig = project.rootProject.extensions.findByName('effectiveConfig')
        project.subprojects.each { Project subprj ->
            subprj.plugins.withType(JavaPlugin) {
                subprj.processResources {
                    filesMatching(subprj.rootProject.ext.resourceFilePatterns) {
                        expand(
                            'application_name': subprj.name,
                            'application_version': subprj.version,
                            'griffon_version': subprj.version,
                            'built_by': effectiveConfig.buildInfo.buildBy,
                            'created_by': effectiveConfig.buildInfo.buildCreatedBy,
                            'build_date': effectiveConfig.buildInfo.buildDate,
                            'build_time': effectiveConfig.buildInfo.buildTime,
                            'build_revision': effectiveConfig.buildInfo.buildRevision
                        )
                    }
                }
            }
        }

        coveralls {
            sourceDirs = effectiveConfig.jacoco.projects().sourceSets.main.allSource.srcDirs.flatten()
            jacocoReportPath = effectiveConfig.jacoco.mergeReportXmlFile
        }

        sonarqube {
            properties {
                property 'sonar.jacoco.reportPath', effectiveConfig.jacoco.mergeExecFile.absolutePath
            }
        }

    }
})
