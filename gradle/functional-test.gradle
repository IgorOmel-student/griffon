/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configurations {
    functionalTestCompile {
        extendsFrom compile
    }
    functionalTestRuntime {
        extendsFrom runtime
    }
}

dependencies {
    // functionalTestCompile "junit:junit:$junitVersion"
    functionalTestCompile "org.hamcrest:java-hamcrest:$hamcrestVersion"
    functionalTestCompile "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    functionalTestCompile "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    functionalTestCompile("org.junit.vintage:junit-vintage-engine:$junit5Version") {
        exclude module: 'junit', group: 'junit'
    }
    functionalTestCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    functionalTestCompile("org.codehaus.groovy:groovy-all:$groovyVersion") {
        exclude module: 'junit', group: 'junit'
    }
}

sourceSets {
    functionalTest {
        if (file('src/functional-test/java').exists()) {
            java.srcDirs file('src/functional-test/java')
        }
        if (file('src/functional-test/groovy').exists()) {
            groovy.srcDirs file('src/functional-test/groovy')
        }
        resources.srcDir file('src/functional-test/resources')
        compileClasspath += sourceSets.main.output
        compileClasspath += configurations.compileOnly
        compileClasspath += configurations.testCompileOnly
        runtimeClasspath += compileClasspath
    }
}

idea {
    module {
        scopes.TEST.plus += [configurations.functionalTestCompile]
        scopes.TEST.plus += [configurations.functionalTestRuntime]
        testSourceDirs += sourceSets.functionalTest.allSource.srcDirs
    }
}

task functionalTest(type: Test, dependsOn: jar) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.enabled = false
    ignoreFailures = !rootProject.fullBuild

    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

task functionalTestReport(type: TestReport) {
    destinationDir = file("${buildDir}/reports/functional-tests")
    reportOn functionalTest.binResultsDir
}

functionalTest.mustRunAfter integrationTest
functionalTest.finalizedBy functionalTestReport
check.dependsOn functionalTestReport
