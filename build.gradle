/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2008-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/pledbrook/plugins' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath 'uk.co.cacoethes:lazybones-gradle:1.2.4'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'org.kordamp.gradle:clirr-gradle-plugin:0.2.5'
        classpath 'net.nemerosa:versioning:2.7.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.gradle.publish:plugin-publish-plugin:0.10.0'
        classpath 'gradle.plugin.net.ossindex:ossindex-gradle-plugin:0.1.1'
        classpath 'org.kordamp.gradle:jdeps-gradle-plugin:0.3.0'
        classpath 'com.gradle:build-scan-plugin:1.15.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
        classpath 'org.standardout:gradle-versioneye-plugin:1.5.0'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.3.0'
        classpath 'gradle.plugin.gradle-java9-collision:plugin:0.2.3'
    }
}
apply plugin: 'com.gradle.build-scan'
apply from: 'gradle/idea.gradle'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'net.nemerosa.versioning'
apply plugin: 'org.sonarqube'
apply plugin: 'org.standardout.versioneye'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

jacoco {
    toolVersion = jacocoVersion
}

boolean travis   = (System.env['TRAVIS'] ?: false) as boolean
boolean appveyor = (System.env['APPVEYOR'] ?: false) as boolean
Date buildTimeAndDate = new Date()
ext {
    buildBy = System.properties['user.name']
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
    buildCreatedBy = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString()
    projectsWithCoverage = []
    projectsWithIntegrationCoverage = []
    projectsWithFunctionalCoverage = []
    baseJaCocoDir = "${buildDir}/reports/jacoco/test/"
    jacocoMergeExecFile = "${baseJaCocoDir}jacocoTestReport.exec"
    jacocoMergeReportHTMLFile = "${baseJaCocoDir}/html/"
    jacocoMergeReportXMLFile = "${baseJaCocoDir}/jacocoTestReport.xml"
    projectsWithClirr = []
    depProjects = []
    fullBuild = !travis && !appveyor
    resourceFilePatterns = [
        '**/*.properties',
        '**/*.groovy',
        '**/*.html',
        '**/*.xml',
        '**/*.txt'
    ]
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''
if (!project.hasProperty('mavenUsername')) ext.mavenUsername = ''
if (!project.hasProperty('mavenPassword')) ext.mavenPassword = ''

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'net.ossindex.audit'

    repositories {
        jcenter()
        flatDir { dir rootProject.file('libraries') }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    audit {
        failOnError = false
    }
}

subprojects { subproj ->
    plugins.withType(JavaPlugin) {
        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        subproj.tasks.withType(GroovyCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        dependencies {
            testCompile "org.junit.jupiter:junit-jupiter-api:$junit5Version"
            testCompile "org.junit.jupiter:junit-jupiter-params:$junit5Version"
            testCompile "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
            testCompile("junit:junit:$junitVersion") {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
            testCompile('com.google.guiceberry:guiceberry:3.3.1') {
                exclude group: 'junit', module: 'junit'
            }
            testCompile('name.falgout.jeffrey.testing.junit5:guice-extension:1.0.2') {
                transitive = false
            }
            testCompile("com.google.inject:guice:$guiceVersion") {
                exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
            }
            if (!subproj.name.startsWith('gradle-')) {
                testCompile("org.codehaus.groovy:groovy-all:$groovyVersion") {
                    exclude group: 'junit', module: 'junit'
                }
                testCompile("org.spockframework:spock-core:$spockVersion") {
                    exclude group: 'org.codehaus.groovy', module: 'groovy-all'
                    exclude group: 'junit', module: 'junit'
                }

                testCompile "javax.application:jsr377-tck:$jsr377TckVersion"
                testCompile "org.mockito:mockito-core:$mockitoVersion"
            }
            testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
            testCompile 'cglib:cglib-nodep:3.2.0'
        }

        processResources {
            filesMatching(resourceFilePatterns) {
                expand(
                    'application_name'   : project.name,
                    'application_version': project.version,
                    'griffon_version'    : project.version,
                    'built_by'           : buildBy,
                    'created_by'         : buildCreatedBy,
                    'build_date'         : buildDate,
                    'build_time'         : buildTime,
                    'build_revision'     : versioning.info.commit
                )
            }
        }

        processTestResources {
            filesMatching(resourceFilePatterns) {
                expand(
                    'application_name'   : project.name,
                    'application_version': project.version,
                    'griffon_version'    : project.version
                )
            }
        }

        task sourceJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            group 'Build'
            description 'An archive of the Javadocs'
            classifier 'javadoc'
            from javadoc.destinationDir
        }

        test {
            useJUnitPlatform()

            testLogging {
                events 'passed', 'skipped', 'failed'
            }

            reports {
                html.enabled = true
            }
        }

        subproj.test.doFirst { t -> println t.includes }

        tasks.withType(AbstractCompile) {
            if (rootProject.hasProperty('lint') && rootProject.lint.toBoolean()) {
                options.compilerArgs = [
                    '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
                ]
            }
        }

        subproj.apply from: rootProject.file('gradle/code-quality.gradle')

        sonarqube {
            skipProject = !subproj.publishJars.toBoolean()
        }

        if (subproj.publishJars.toBoolean()) {
            subproj.apply plugin: 'org.jonnyzzz.java9c'
            subproj.apply from: rootProject.file('gradle/publish.gradle')

            java9c {
                failOnCollision = false
            }

            if (subproj.name.startsWith('griffon-')) {
                subproj.apply plugin: 'org.kordamp.gradle.clirr'
                subproj.apply plugin: 'org.kordamp.jdeps'
                subproj.apply from: rootProject.file('gradle/bintray.gradle')
                subproj.apply from: rootProject.file('gradle/sonarqube.gradle')

                subproj.jdeps {
                    failOnError = false
                }

                subproj.clirr {
                    failOnErrors = false
                }

                projectsWithClirr << subproj
            }

            test {
                testLogging {
                    afterSuite { desc, result ->
                        if (!desc.parent) {
                            println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                        }
                    }
                }
            }

            javadoc {
                excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

                options.addBooleanOption('javafx', true)

                options.use         = true
                options.splitIndex  = true
                options.encoding    = 'UTF-8'
                options.author      = true
                options.version     = true
                options.windowTitle = "$subproj.pomDescription $version"
                options.docTitle    = "$subproj.pomDescription $version"
                options.footer      = rootProject.javadocFooter
                options.links 'https://www.slf4j.org/apidocs/'
                options.links 'https://junit.org/junit4/javadoc/latest/'
                options.links 'https://aalmiray.github.io/jsr-305/apidocs/'
                options.links 'https://javax-inject.github.io/javax-inject/api/'
                options.links 'https://docs.oracle.com/javase/8/docs/api/'
                options.links 'https://docs.oracle.com/javase/8/javafx/api/'
                options.links 'https://google.github.io/guice/api-docs/4.1/javadoc/'
                options.links 'https://mabe02.github.io/lanterna/apidocs/3.0/'
                options.links 'https://pivot.apache.org/2.0.5/docs/api/'
                options.links 'http://docs.groovy-lang.org/latest/html/api/'
                options.links 'https://aalmiray.github.io/jipsy/apidocs/'
                options.links 'https://aalmiray.github.io/gipsy/apidocs/'

                doLast { task ->
                    copy {
                        into task.destinationDir
                        from rootProject.file('src/javadoc/resources/img/griffon.ico'),
                             rootProject.file('src/javadoc/resources/css/stylesheet.css')
                    }
                    copy {
                        into file("${task.destinationDir}/resources")
                        from rootProject.file('src/javadoc/resources/img/')
                    }
                }
            }
        }

        subproj.apply plugin: 'org.kordamp.gradle.stats'
        if (subproj.projectDir.parentFile.name == 'samples') {
            def statsTask = subproj.tasks.findByName('stats')
            statsTask.formats = ['txt']
            statsTask.paths += [
                mvc       : [name: 'MVCGroups',     path: 'griffon-app/mvcs'],
                model     : [name: 'Models',        path: 'griffon-app/models'],
                view      : [name: 'Views',         path: 'griffon-app/views'],
                controller: [name: 'Controllers',   path: 'griffon-app/controllers'],
                service   : [name: 'Services',      path: 'griffon-app/services'],
                config    : [name: 'Configuration', path: 'griffon-app/conf'],
                lifecycle : [name: 'Lifecycle',     path: 'griffon-app/lifecycle']
            ]
        }
    }

    task allDeps(type: DependencyReportTask) {}
    configurations.all {
        resolutionStrategy.force  "com.google.guava:guava:$guavaVersion",
            "jline:jline:$jlineVersion",
            "junit:junit:$junitVersion",
            "cglib:cglib-nodep:$cglibVersion",
            "org.asciidoctor:asciidoctorj:$asciidoctorjVersion",
            "org.codehau.groovy:groovy-all:$groovyVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.easytesting:fest-util:$festUtilVersion",
            "com.google.code.findbugs:jsr305:$jsr305Version",
            "commons-io:commons-io:$commonsIoVersion",
            "org.apache.commons:commons-lang3:$commonsLang3Version",
            "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:$concurrentLHMVersion",
            "org.ow2.asm:asm:$asmVersion",
            "org.ow2.asm:asm-commons:$asmVersion",
            "org.ow2.asm:asm-tree:$asmVersion",
            "org.objenesis:objenesis:$objenesisVersion",
            "net.bytebuddy:byte-buddy:$bytebuddyVersion"

        //resolutionStrategy.failOnVersionConflict()
    }
}

evaluationDependsOnChildren()

task jacocoRootMerge(type: org.gradle.testing.jacoco.tasks.JacocoMerge) {
    dependsOn = projectsWithCoverage.test + projectsWithIntegrationCoverage.integrationTest + projectsWithFunctionalCoverage.functionalTest
    executionData = files([
        projectsWithCoverage.jacocoTestReport +
            projectsWithIntegrationCoverage.jacocoIntegrationTestReport +
            projectsWithFunctionalCoverage.jacocoFunctionalTestReport
    ].unique().executionData)
    destinationFile = file(jacocoMergeExecFile)
}

task jacocoRootReport(dependsOn: jacocoRootMerge, type: JacocoReport) {
    group = 'Reporting'
    description = 'Aggregate Jacoco coverage reports.'

    additionalSourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(projectsWithCoverage .sourceSets.main.allSource.srcDirs)
    classDirectories = files(projectsWithCoverage.sourceSets.main.output)
    executionData = files(jacocoRootMerge.destinationFile)

    reports {
        html.enabled = true
        xml.enabled = true
        html.destination = file(jacocoMergeReportHTMLFile)
        xml.destination = file(jacocoMergeReportXMLFile)
    }
}

sonarqube {
    properties {
        property 'sonar.jacoco.reportPath', file(jacocoMergeExecFile).absolutePath
    }
}

versioneye {
    includeSubProjects = true
}

coveralls {
    sourceDirs = projectsWithCoverage.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = jacocoMergeReportXMLFile
}

task binaryReport(type: org.kordamp.gradle.clirr.ClirrReportTask) {
    dependsOn = projectsWithClirr.tasks.clirr
    reports = files(projectsWithClirr.findAll{ it.extensions.clirr.enabled }.tasks.clirr.xmlReport)
    filter = { difference ->
        difference?.message?.text() =~ /field __timeStamp/ ||
        difference?.message?.text() =~ /super\$/ ||
        difference?.message?.text() =~ /this\$/ ||
        difference?.message?.text() =~ /__.swapInit/ ||
        difference?.message?.text() =~ /_methodMissing/ ||
        difference?.message?.text() =~ /_propertyMissing/ ||
        difference?.message?.text() =~ /getDE/ ||
        difference?.message?.text() =~ /getCO/ ||
        difference?.message?.text() =~ /getSE/ ||
        difference?.classname?.text() =~ /_closure/ ||
        !(difference?.classname?.text() =~ /griffon/)
    }
}

task sourceReport(type: org.kordamp.gradle.stats.AggregateStatsReportTask) {
    projects = project.subprojects.grep { it.name.startsWith('griffon') }.name
}
