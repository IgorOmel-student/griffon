<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="griffon.util.GriffonClassUtilsSpec" tests="680" skipped="0" failures="0" errors="0" timestamp="2016-11-02T15:17:40" hostname="testing-gce-ebe1e2ab-5243-4a05-8a72-5c053e509e3c" time="0.594">
  <properties/>
  <testcase name="isContributionMethod() returns true for 'withSomething' (name)" classname="griffon.util.GriffonClassUtilsSpec" time="0.008"/>
  <testcase name="isContributionMethod() returns false for 'something' (name)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventHandler() returns true for 'onSomething' (name)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'something' (name)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'onShutdown' (name)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isSetterMethod() returns true for 'public abstract void griffon.util.GriffonClassUtilsSpec$MySetter.setSomething(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isSetterMethod() returns false for 'public abstract java.lang.String griffon.util.GriffonClassUtilsSpec$MyGetter.getSomething()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isGetterMethod() returns true for 'public abstract java.lang.String griffon.util.GriffonClassUtilsSpec$MyGetter.getSomething()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isGetterMethod() returns false for 'public abstract void griffon.util.GriffonClassUtilsSpec$MySetter.setSomething(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isContributionMethod() returns true for 'public abstract void griffon.util.GriffonClassUtilsSpec$MyContributor.withSomething()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isContributionMethod() returns false for 'public abstract void griffon.util.GriffonClassUtilsSpec$MyEventHandler.onMyEvent()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns true for 'public abstract void griffon.util.GriffonClassUtilsSpec$MyEventHandler.onMyEvent()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract void griffon.util.GriffonClassUtilsSpec$MyContributor.withSomething()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventHandler() returns false for 'public abstract org.slf4j.Logger griffon.core.addon.GriffonAddon.getLog()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract java.util.List griffon.core.addon.GriffonAddon.getStartupGroups()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract java.util.Map griffon.core.addon.GriffonAddon.getMvcGroups()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract void griffon.core.addon.GriffonAddon.init(griffon.core.GriffonApplication)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventHandler() returns false for 'public abstract boolean griffon.core.ShutdownHandler.canShutdown(griffon.core.GriffonApplication)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract void griffon.core.ShutdownHandler.onShutdown(griffon.core.GriffonApplication)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.List,java.util.Locale,java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.List,java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.lang.Object[],java.util.Locale,java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.lang.Object[],java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.Map,java.util.Locale,java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.Map,java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.003"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.Map,java.util.Locale) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.Map) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.lang.Object[],java.util.Locale) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.lang.Object[]) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.Locale) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.Locale,java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.List,java.util.Locale) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResource(java.lang.String,java.util.List) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.List,java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.List,java.util.Locale,java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.lang.Object[],java.util.Locale,java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.lang.Object[],java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.Map,java.util.Locale,java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.Map,java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.Map,java.util.Locale,java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.Map,java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.lang.Object[],java.util.Locale,java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.lang.Object[],java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.Locale,java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.Locale,java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.lang.Object,java.lang.Class)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.List,java.util.Locale,java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceConverted(java.lang.String,java.util.List,java.lang.Class) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.Object griffon.core.resources.ResourceResolver.resolveResourceValue(java.lang.String,java.util.Locale) throws griffon.core.resources.NoSuchResourceException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.String griffon.core.resources.ResourceResolver.formatResource(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.003"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.String griffon.core.resources.ResourceResolver.formatResource(java.lang.String,java.lang.Object[])' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public abstract java.lang.String griffon.core.resources.ResourceResolver.formatResource(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns false for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns false for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns false for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns false for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public abstract boolean griffon.core.threading.ThreadingHandler.isUIThread()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUIAsync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public abstract java.lang.Object griffon.core.threading.ThreadingHandler.runInsideUISync(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUISync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public abstract void griffon.core.threading.ThreadingHandler.runOutsideUI(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.ExecutorService,java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Class,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.003"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Class,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.String,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.String,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Class,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Class,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.String,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.String,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.007"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEvent(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEvent(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEvent(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract boolean griffon.core.event.EventPublisher.isEventPublishingEnabled()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract void griffon.core.event.EventPublisher.setEventPublishingEnabled(boolean)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract java.util.Collection griffon.core.event.EventPublisher.getEventListeners()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public abstract java.util.Collection griffon.core.event.EventPublisher.getEventListeners(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns false for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns false for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns false for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns false for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.Object griffon.core.i18n.MessageSource.resolveMessageValue(java.lang.String,java.util.Locale) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.util.ResourceBundle griffon.core.i18n.MessageSource.asResourceBundle()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.formatMessage(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.formatMessage(java.lang.String,java.lang.Object[])' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.formatMessage(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.Map,java.util.Locale) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.Map) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.List,java.util.Locale,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.Map,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.Map,java.util.Locale,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.List,java.util.Locale) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.List) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.lang.Object[],java.util.Locale) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.lang.Object[]) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.Locale) throws griffon.core.i18n.NoSuchMessageException' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.List,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.lang.Object[],java.util.Locale,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.lang.Object[],java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.util.Locale,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public abstract java.lang.String griffon.core.i18n.MessageSource.getMessage(java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns false for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns false for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns false for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns false for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.lang.String,java.util.Map,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.util.Map,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.util.Map,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.util.Map,java.lang.String,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.util.Map,java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.util.Map,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.destroyMVCGroup(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.util.Map,java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.util.Map,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.lang.String,java.util.Map,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.util.Map,java.lang.String,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.util.Map,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.util.Map,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.artifact.GriffonMvcArtifact.mvcGroupDestroy()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.artifact.GriffonMvcArtifact.mvcGroupInit(java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.artifact.GriffonMvcArtifact.getMvcGroup()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract org.slf4j.Logger griffon.core.artifact.GriffonArtifact.getLog()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.GriffonApplication griffon.core.artifact.GriffonArtifact.getApplication()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.artifact.GriffonClass griffon.core.artifact.GriffonArtifact.getGriffonClass()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract boolean griffon.core.threading.ThreadingHandler.isUIThread()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUIAsync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.lang.Object griffon.core.threading.ThreadingHandler.runInsideUISync(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUISync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runOutsideUI(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.ExecutorService,java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.lang.String,java.util.Map,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.util.Map,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.util.Map,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.util.Map,java.lang.String,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.util.Map,java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.util.Map,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.destroyMVCGroup(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.util.Map,java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.util.Map,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.lang.String,java.util.Map,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.util.Map,java.lang.String,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.util.Map,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.util.Map,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Class,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Class,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.String,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.String,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Class,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Class,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.String,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.String,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEvent(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEvent(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEvent(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public abstract boolean griffon.core.event.EventPublisher.isEventPublishingEnabled()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.setEventPublishingEnabled(boolean)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public abstract java.util.Collection griffon.core.event.EventPublisher.getEventListeners()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.003"/>
  <testcase name="isMvcMethod() returns false for 'public abstract java.util.Collection griffon.core.event.EventPublisher.getEventListeners(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public abstract boolean griffon.core.threading.ThreadingHandler.isUIThread()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUIAsync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isThreadingMethod() returns true for 'public abstract java.lang.Object griffon.core.threading.ThreadingHandler.runInsideUISync(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUISync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isThreadingMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runOutsideUI(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.ExecutorService,java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.007"/>
  <testcase name="isThreadingMethod() returns true for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns false for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isThreadingMethod() returns false for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns false for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isThreadingMethod() returns false for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract java.beans.PropertyChangeListener[] griffon.core.Observable.getPropertyChangeListeners(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract java.beans.PropertyChangeListener[] griffon.core.Observable.getPropertyChangeListeners()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.addPropertyChangeListener(java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.removePropertyChangeListener(java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Vetoable.addVetoableChangeListener(java.beans.VetoableChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Vetoable.addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Vetoable.removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Vetoable.removeVetoableChangeListener(java.beans.VetoableChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public abstract java.beans.VetoableChangeListener[] griffon.core.Vetoable.getVetoableChangeListeners()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract java.beans.VetoableChangeListener[] griffon.core.Vetoable.getVetoableChangeListeners(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public abstract java.beans.PropertyChangeListener[] griffon.core.Observable.getPropertyChangeListeners(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public abstract java.beans.PropertyChangeListener[] griffon.core.Observable.getPropertyChangeListeners()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.addPropertyChangeListener(java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.removePropertyChangeListener(java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public abstract void griffon.core.Observable.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns false for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns false for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns false for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns false for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract org.slf4j.Logger griffon.core.artifact.GriffonArtifact.getLog()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.GriffonApplication griffon.core.artifact.GriffonArtifact.getApplication()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.artifact.GriffonClass griffon.core.artifact.GriffonArtifact.getGriffonClass()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract boolean griffon.core.threading.ThreadingHandler.isUIThread()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUIAsync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.lang.Object griffon.core.threading.ThreadingHandler.runInsideUISync(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runInsideUISync(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.threading.ThreadingHandler.runOutsideUI(java.lang.Runnable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.ExecutorService,java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.concurrent.Future griffon.core.threading.ThreadingHandler.runFuture(java.util.concurrent.Callable)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.lang.String,java.util.Map,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.util.Map,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.lang.String,java.util.Map,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVCGroup(java.util.Map,java.lang.String,java.lang.String,griffon.core.mvc.MVCGroupFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.util.Map,java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.util.Map,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.List griffon.core.mvc.MVCHandler.createMVC(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.destroyMVCGroup(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.util.Map,java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.util.Map,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract griffon.core.mvc.MVCGroup griffon.core.mvc.MVCHandler.createMVCGroup(java.lang.String,java.lang.String,java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.lang.String,java.util.Map,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.util.Map,java.lang.String,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.lang.String,java.util.Map,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract void griffon.core.mvc.MVCHandler.withMVC(java.util.Map,java.lang.String,griffon.core.mvc.MVCFunction)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.net.URL griffon.core.resources.ResourceHandler.getResourceAsURL(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.io.InputStream griffon.core.resources.ResourceHandler.getResourceAsStream(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.util.List griffon.core.resources.ResourceHandler.getResources(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public abstract java.lang.ClassLoader griffon.core.resources.ResourceHandler.classloader()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Class,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Class,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.String,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.addEventListener(java.lang.String,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.util.Map)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Class,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Class,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.Object)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.String,griffon.core.RunnableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.removeEventListener(java.lang.String,griffon.core.CallableWithArgs)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEvent(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEvent(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEvent(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventOutsideUI(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(griffon.core.event.Event)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(java.lang.String,java.util.List)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.publishEventAsync(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract boolean griffon.core.event.EventPublisher.isEventPublishingEnabled()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract void griffon.core.event.EventPublisher.setEventPublishingEnabled(boolean)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract java.util.Collection griffon.core.event.EventPublisher.getEventListeners()' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public abstract java.util.Collection griffon.core.event.EventPublisher.getEventListeners(java.lang.String)' (java.lang.reflect.Method)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isSetterMethod() returns true for 'public setSomething(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isSetterMethod() returns false for 'public getSomething()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isGetterMethod() returns true for 'public getSomething()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isGetterMethod() returns false for 'public setSomething(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isContributionMethod() returns true for 'public withSomething()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isContributionMethod() returns false for 'public onMyEvent()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns true for 'public onMyEvent()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventHandler() returns false for 'public withSomething()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract org.slf4j.Logger griffon.core.addon.GriffonAddon.getLog()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventHandler() returns false for 'public abstract java.util.List griffon.core.addon.GriffonAddon.getStartupGroups()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract java.util.Map griffon.core.addon.GriffonAddon.getMvcGroups()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventHandler() returns false for 'public abstract void griffon.core.addon.GriffonAddon.init(griffon.core.GriffonApplication)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventHandler() returns false for 'public abstract boolean griffon.core.ShutdownHandler.canShutdown(griffon.core.GriffonApplication)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventHandler() returns false for 'public abstract void griffon.core.ShutdownHandler.onShutdown(griffon.core.GriffonApplication)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.List, java.util.Locale, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.List, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, [Ljava.lang.Object;, java.util.Locale, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, [Ljava.lang.Object;, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.Map, java.util.Locale, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.Map, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.Map, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, [Ljava.lang.Object;, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, [Ljava.lang.Object;)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.Locale, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.List, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResource(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.List, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.List, java.util.Locale, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, [Ljava.lang.Object;, java.util.Locale, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, [Ljava.lang.Object;, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.Map, java.util.Locale, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.Map, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.Map, java.util.Locale, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.Map, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, [Ljava.lang.Object;, java.util.Locale, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, [Ljava.lang.Object;, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.Locale, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.Locale, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.lang.Object, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.List, java.util.Locale, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceConverted(java.lang.String, java.util.List, java.lang.Class)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public resolveResourceValue(java.lang.String, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public formatResource(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public formatResource(java.lang.String, [Ljava.lang.Object;)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns true for 'public formatResource(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns false for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns false for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns false for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceResolverMethod() returns false for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns true for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public isUIThread()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public runInsideUIAsync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public runInsideUISync(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public runInsideUISync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public runOutsideUI(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public runFuture(java.util.concurrent.ExecutorService, java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isResourceHandlerMethod() returns false for 'public runFuture(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public addEventListener(java.lang.Class, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public addEventListener(java.lang.Class, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public addEventListener(java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public addEventListener(java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public addEventListener(java.lang.String, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public addEventListener(java.lang.String, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public removeEventListener(java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public removeEventListener(java.lang.Class, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public removeEventListener(java.lang.Class, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public removeEventListener(java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public removeEventListener(java.lang.String, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public removeEventListener(java.lang.String, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEvent(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEvent(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEvent(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEventOutsideUI(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEventOutsideUI(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEventOutsideUI(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEventAsync(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEventAsync(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public publishEventAsync(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public isEventPublishingEnabled()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public setEventPublishingEnabled(boolean)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns true for 'public getEventListeners()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns true for 'public getEventListeners(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns false for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns false for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isEventPublisherMethod() returns false for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isEventPublisherMethod() returns false for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public resolveMessageValue(java.lang.String, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public asResourceBundle()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public formatMessage(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public formatMessage(java.lang.String, [Ljava.lang.Object;)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public formatMessage(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.Map, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.List, java.util.Locale, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.Map, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.Map, java.util.Locale, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.List, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, [Ljava.lang.Object;, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, [Ljava.lang.Object;)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.Locale)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.List, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, [Ljava.lang.Object;, java.util.Locale, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, [Ljava.lang.Object;, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.util.Locale, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns true for 'public getMessage(java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns false for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns false for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMessageSourceMethod() returns false for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMessageSourceMethod() returns false for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, java.lang.String, java.util.Map, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.util.Map, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, java.util.Map, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.util.Map, java.lang.String, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.util.Map, java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String, java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.util.Map, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public destroyMVCGroup(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.util.Map, java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.util.Map, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String, java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, java.lang.String, java.util.Map, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.util.Map, java.lang.String, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, java.util.Map, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.util.Map, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public mvcGroupDestroy()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public mvcGroupInit(java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public getMvcGroup()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public getLog()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public getApplication()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public getGriffonClass()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public isUIThread()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public runInsideUIAsync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public runInsideUISync(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public runInsideUISync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public runOutsideUI(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public runFuture(java.util.concurrent.ExecutorService, java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public runFuture(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, java.lang.String, java.util.Map, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.util.Map, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.lang.String, java.util.Map, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVCGroup(java.util.Map, java.lang.String, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.util.Map, java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String, java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.util.Map, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVC(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public destroyMVCGroup(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.util.Map, java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.util.Map, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public createMVCGroup(java.lang.String, java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, java.lang.String, java.util.Map, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.util.Map, java.lang.String, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.lang.String, java.util.Map, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public withMVC(java.util.Map, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns true for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public addEventListener(java.lang.Class, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public addEventListener(java.lang.Class, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public addEventListener(java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public addEventListener(java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public addEventListener(java.lang.String, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public addEventListener(java.lang.String, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public removeEventListener(java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public removeEventListener(java.lang.Class, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public removeEventListener(java.lang.Class, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public removeEventListener(java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public removeEventListener(java.lang.String, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public removeEventListener(java.lang.String, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public publishEvent(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public publishEvent(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public publishEvent(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public publishEventOutsideUI(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public publishEventOutsideUI(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public publishEventOutsideUI(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public publishEventAsync(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public publishEventAsync(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public publishEventAsync(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public isEventPublishingEnabled()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public setEventPublishingEnabled(boolean)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isMvcMethod() returns false for 'public getEventListeners()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isMvcMethod() returns false for 'public getEventListeners(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public isUIThread()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public runInsideUIAsync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public runInsideUISync(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public runInsideUISync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public runOutsideUI(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public runFuture(java.util.concurrent.ExecutorService, java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns true for 'public runFuture(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns false for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns false for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns false for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isThreadingMethod() returns false for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public getPropertyChangeListeners(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public getPropertyChangeListeners()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public addPropertyChangeListener(java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public removePropertyChangeListener(java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public addVetoableChangeListener(java.beans.VetoableChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public addVetoableChangeListener(java.lang.String, java.beans.VetoableChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public removeVetoableChangeListener(java.lang.String, java.beans.VetoableChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public removeVetoableChangeListener(java.beans.VetoableChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public getVetoableChangeListeners()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public getVetoableChangeListeners(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public getPropertyChangeListeners(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public getPropertyChangeListeners()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public addPropertyChangeListener(java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns true for 'public removePropertyChangeListener(java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns true for 'public removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns false for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns false for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isObservableMethod() returns false for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isObservableMethod() returns false for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public getLog()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public getApplication()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public getGriffonClass()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public isUIThread()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public runInsideUIAsync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public runInsideUISync(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public runInsideUISync(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public runOutsideUI(java.lang.Runnable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public runFuture(java.util.concurrent.ExecutorService, java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public runFuture(java.util.concurrent.Callable)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVCGroup(java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVCGroup(java.lang.String, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVCGroup(java.lang.String, java.lang.String, java.util.Map, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVCGroup(java.util.Map, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVCGroup(java.lang.String, java.util.Map, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVCGroup(java.util.Map, java.lang.String, java.lang.String, griffon.core.mvc.MVCGroupFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVC(java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVC(java.util.Map, java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVC(java.lang.String, java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVC(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVC(java.util.Map, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVC(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public destroyMVCGroup(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVCGroup(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVCGroup(java.util.Map, java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVCGroup(java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVCGroup(java.util.Map, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVCGroup(java.lang.String, java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns true for 'public createMVCGroup(java.lang.String, java.lang.String, java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVC(java.lang.String, java.lang.String, java.util.Map, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVC(java.lang.String, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVC(java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVC(java.util.Map, java.lang.String, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVC(java.lang.String, java.util.Map, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public withMVC(java.util.Map, java.lang.String, griffon.core.mvc.MVCFunction)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public getResourceAsURL(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public getResourceAsStream(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public getResources(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns true for 'public classloader()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public addEventListener(java.lang.Class, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public addEventListener(java.lang.Class, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public addEventListener(java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public addEventListener(java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public addEventListener(java.lang.String, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public addEventListener(java.lang.String, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public removeEventListener(java.util.Map)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public removeEventListener(java.lang.Class, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public removeEventListener(java.lang.Class, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public removeEventListener(java.lang.Object)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public removeEventListener(java.lang.String, griffon.core.RunnableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public removeEventListener(java.lang.String, griffon.core.CallableWithArgs)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEvent(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEvent(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEvent(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEventOutsideUI(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEventOutsideUI(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEventOutsideUI(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEventAsync(griffon.core.event.Event)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEventAsync(java.lang.String, java.util.List)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public publishEventAsync(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public isEventPublishingEnabled()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public setEventPublishingEnabled(boolean)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="isArtifactMethod() returns false for 'public getEventListeners()'" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="isArtifactMethod() returns false for 'public getEventListeners(java.lang.String)'" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="InvokeInstanceMethod can resolved overloaded calls inputs=[foo, 1]" classname="griffon.util.GriffonClassUtilsSpec" time="0.015"/>
  <testcase name="InvokeInstanceMethod can resolved overloaded calls inputs=[foo, []]" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="InvokeInstanceMethod can resolved overloaded calls inputs=[foo, null]" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="InvokeInstanceMethod can resolved overloaded calls inputs=[foo]" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null byte array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null boolean array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null short array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: null int array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: null long array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null float array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null double array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null char array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null Object array throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null Collection throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="Verify arguments for requireNonEmpty: null Map throws NPE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [B) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [Z) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [S) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.002"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [I) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [J) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [F) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [D) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for   (class [C) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class [Ljava.lang.Object;) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [] (class java.util.ArrayList) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: null message for  [:] (class java.util.LinkedHashMap) throws IAE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [B) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [Z) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [S) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [I) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [J) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [F) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [D) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty   (class [C) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.009"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [Ljava.lang.Object;) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class java.util.ArrayList) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [:] (class java.util.LinkedHashMap) throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [B) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [Z) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [S) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [I) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [J) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [F) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [D) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: empty   (class [C) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class [Ljava.lang.Object;) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [] (class java.util.ArrayList) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="Verify arguments for requireNonEmpty: empty  [:] (class java.util.LinkedHashMap) with message throws ISE" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="RequireNonEmpty is successful for [1] (class [B)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="RequireNonEmpty is successful for [1] (class [S)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="RequireNonEmpty is successful for [1] (class [I)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="RequireNonEmpty is successful for [1] (class [J)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="RequireNonEmpty is successful for [1.0] (class [F)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="RequireNonEmpty is successful for [1.0] (class [D)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="RequireNonEmpty is successful for ? (class [C)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="RequireNonEmpty is successful for [true] (class [Z)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="RequireNonEmpty is successful for [java.lang.Object@327f89cf] (class [Ljava.lang.Object;)" classname="griffon.util.GriffonClassUtilsSpec" time="0.001"/>
  <testcase name="RequireNonEmpty is successful for [1] (class java.util.ArrayList)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <testcase name="RequireNonEmpty is successful for [key:value] (class java.util.LinkedHashMap)" classname="griffon.util.GriffonClassUtilsSpec" time="0.0"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
